---
description: Core development patterns and standards for Waidrin
globs: **/*.ts,**/*.tsx
---

# Core Development Standards

## Project Overview

Waidrin is a Next.js-based AI role-playing game engine with a headless backend and React frontend. The project follows a specific architecture pattern with multiple engine support and plugin extensibility.

## TypeScript Standards

- **Strict Mode**: Always use strict TypeScript with `noEmit: true` for type checking
- **Zod Integration**: All data validation uses Zod schemas from [lib/schemas.ts](mdc:lib/schemas.ts)
- **Type Inference**: Prefer type inference over explicit types when possible
- **Zod v4**: Use `zod/v4` import for all schema operations
- **Immer Types**: Use `WritableDraft<T>` for Immer state updates

## React Patterns

- **Client Components**: Use `"use client"` directive for interactive components
- **Server Components**: Default to server components when possible
- **Hooks**: Use `useShallow` from zustand for performance optimization
- **State Updates**: Always use the `setAsync` method for state updates that involve async operations

## Component Structure

```typescript
// Component imports
import { Component } from "@radix-ui/themes";
import { useShallow } from "zustand/shallow";
import { useStateStore } from "@/lib/state";

// Component definition
export default function ComponentName() {
  const { stateProperty } = useStateStore(
    useShallow((state) => ({
      stateProperty: state.property,
    }))
  );
  
  return (
    <Component>
      {/* JSX content */}
    </Component>
  );
}
```

## Error Handling

- **Abort Errors**: Use `isAbortError()` to detect user-initiated cancellations
- **Error Boundaries**: Wrap async operations in try-catch blocks
- **User Feedback**: Always provide user-friendly error messages

## Performance

- **Throttling**: Use `throttle` from lodash for frequent updates
- **Shallow Comparison**: Use `useShallow` for Zustand selectors
- **Memoization**: Use React.memo for expensive components when needed

## Code Style

- **Biome**: Follow Biome configuration in [biome.json](mdc:biome.json)
- **Line Width**: 120 characters maximum
- **Quotes**: Use double quotes for strings
- **Semicolons**: Always use semicolons
- **Imports**: Organize imports automatically with Biome
- **Development**: Do not remove unused types or imports until instructed