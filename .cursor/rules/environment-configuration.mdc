---
description: Environment variable configuration and API settings
globs: lib/state.ts,lib/schemas.ts
---

# Environment Configuration Rules

## Environment Variables

### API Configuration
- `OPENAI_API_URL` - Default API URL (defaults to "https://api.openai.com/v1/")
- `OPENAI_API_KEY` - Default API Key (defaults to empty string)
- `OPENAI_MODEL` - Default Model (defaults to empty string)

### Implementation Pattern
Environment variables provide defaults but can be overridden at runtime:

```typescript
// In lib/state.ts
export const initialState: State = schemas.State.parse({
  apiUrl: process.env.OPENAI_API_URL || "https://api.openai.com/v1/",
  apiKey: process.env.OPENAI_API_KEY || "",
  model: process.env.OPENAI_MODEL || "",
  // ... other properties
});
```

## Validation Rules

### URL Validation
- `apiUrl` must be a valid URL format
- Cannot be empty string (causes Zod validation error)
- Default to valid OpenAI API URL if not set

### Schema Validation
- All environment variables are validated through Zod schemas
- Invalid values will cause application startup to fail
- Provides clear error messages for configuration issues

## Runtime Override

### User Configuration
- Users can override environment defaults through UI
- Runtime changes are stored in Zustand state
- Environment variables only provide initial defaults

### State Management
- Initial state uses environment variables
- User changes are persisted in browser storage
- Environment variables don't affect runtime behavior after initial load

## Configuration Files

### State Definition
- [lib/state.ts](mdc:lib/state.ts) - Initial state with environment defaults
- [lib/schemas.ts](mdc:lib/schemas.ts) - Zod validation schemas

### Environment Setup
Create `.env` file for local development:
```bash
OPENAI_API_URL=https://api.openai.com/v1/
OPENAI_API_KEY=your-api-key-here
OPENAI_MODEL=gpt-4o-mini
```

## Error Handling

### Validation Errors
- Invalid URLs cause Zod validation errors
- Missing required fields show clear error messages
- Application won't start with invalid configuration

### Fallback Behavior
- Always provide sensible defaults
- Graceful degradation when configuration is missing
- Clear error messages for debugging

## Development Guidelines

### Adding New Environment Variables
1. Add to environment variable defaults in [lib/state.ts](mdc:lib/state.ts)
2. Add validation to [lib/schemas.ts](mdc:lib/schemas.ts)
3. Update documentation
4. Test with missing/invalid values

### Testing Configuration
- Test with valid environment variables
- Test with missing environment variables
- Test with invalid values
- Verify runtime override works correctly