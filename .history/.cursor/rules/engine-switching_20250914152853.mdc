---
description: Engine switching system and architecture patterns
globs: lib/engine.ts,lib/engines/**/*.ts
---

# Engine Switching System

## Architecture Overview

Waidrin supports multiple game engines through a switching system:
- **Current Engine**: Linear state machine (original implementation)
- **LangGraph Engine**: Graph-based state machine (in development)
- **Engine Switcher**: Runtime switching between engines

## Core Files

- [lib/engine.ts](mdc:lib/engine.ts) - Main engine interface and switcher
- [lib/engines/index.ts](mdc:lib/engines/index.ts) - Engine factory and switcher
- [lib/engines/current/engine.ts](mdc:lib/engines/current/engine.ts) - Current engine wrapper
- [lib/engines/langgraph/](mdc:lib/engines/langgraph/) - LangGraph engine implementation

## Engine Interface

All engines must implement the `GameEngine` interface:

```typescript
interface GameEngine {
  execute(initialState: State): Promise<State>;
  pause(): Promise<void>;
  resume(): Promise<void>;
  stop(): Promise<void>;
  getStatus(): { isRunning: boolean; currentNode?: string };
}
```

## Engine Switcher Pattern

### Factory Pattern
- `EngineFactory` creates engine instances
- `EngineSwitcher` manages runtime switching
- Engines are registered by type ("current", "langgraph")

### Switching Logic
```typescript
// Get engine switcher instance
const switcher = getEngineSwitcher();

// Switch to different engine
await switcher.switchTo("langgraph");

// Get current engine
const engine = switcher.getCurrentEngine();
```

## Current Engine Wrapper

The current engine re-exports functions from the original engine:
- Re-exports functions from [lib/engine-original.ts](mdc:lib/engine-original.ts)
- Exports: `next`, `back`, `reset`, `abort`, `isAbortError`
- Maintains backward compatibility with existing code

## State Management

### Shared State
- All engines use the same Zustand store
- State is managed through [lib/state.ts](mdc:lib/state.ts)
- Immer is used for immutable updates

### Engine-Specific State
- LangGraph engine has additional state properties
- Current engine uses original state schema
- State compatibility is maintained through the interface

## Development Guidelines

### Adding New Engines
1. Create engine directory under `lib/engines/`
2. Implement `GameEngine` interface
3. Register in `EngineFactory`
4. Add switching logic in `EngineSwitcher`

### Testing Engines
- Test each engine independently
- Verify switching works correctly
- Ensure state consistency across engines
- Test error handling and recovery

## Current Status

- ✅ Current engine wrapper implemented
- ✅ LangGraph engine scaffolded (unconfirmed)
- ✅ Engine switching system working
- ⚠️ LangGraph engine needs validation and testing