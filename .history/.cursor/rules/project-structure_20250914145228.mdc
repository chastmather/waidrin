---
alwaysApply: true
---

# Waidrin Project Structure

Waidrin is a Next.js-based AI role-playing game engine with a headless backend and React frontend. The project follows a specific architecture pattern:

## Core Architecture

- **Engine**: [lib/engine.ts](mdc:lib/engine.ts) - Main game state machine and orchestration
- **State Management**: [lib/state.ts](mdc:lib/state.ts) - Zustand store with Immer for immutable updates
- **Backend**: [lib/backend.ts](mdc:lib/backend.ts) - LLM integration and API abstraction
- **Schemas**: [lib/schemas.ts](mdc:lib/schemas.ts) - Zod validation schemas for all data types
- **Prompts**: [lib/prompts.ts](mdc:lib/prompts.ts) - LLM prompt templates

## Directory Structure

- `app/` - Next.js 15 app router pages and layouts
- `components/` - Reusable React components
- `views/` - Page-level view components (Welcome, Chat, etc.)
- `lib/` - Core business logic and utilities
- `plugins/` - Plugin system for extending functionality
- `public/images/` - Static assets and AI-generated artwork

## Key Patterns

- **State Machine**: The game follows a strict view state machine: welcome → connection → genre → character → scenario → chat
- **Event-Driven**: All game events are typed and validated through Zod schemas
- **Plugin System**: Extensible architecture with plugin support for backends and custom functionality
- **Immutable Updates**: All state changes use Immer for safe, immutable updates
- **Type Safety**: Full TypeScript with strict validation using Zod schemas

## File Naming Conventions

- Components: PascalCase (e.g., `MainMenu.tsx`)
- Views: PascalCase (e.g., `CharacterSelect.tsx`)
- Utilities: camelCase (e.g., `backend.ts`)
- Schemas: camelCase (e.g., `schemas.ts`)