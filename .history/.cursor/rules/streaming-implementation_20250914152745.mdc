---
description: Streaming implementation patterns and fixes for Waidrin
globs: lib/engine-original.ts,lib/backend.ts,lib/engines/current/backend.ts
---

# Streaming Implementation Rules

## Key Principles

### Backend Trust Pattern
- **Always trust the backend to accumulate complete responses**
- The `backend.getNarration()` method already handles complete text accumulation internally
- Do NOT manually accumulate streaming text in engine callbacks

### Immer Draft Mutation Rules
- **Never mutate Immer drafts inside async callbacks**
- Only mutate draft state within the main producer function
- Use separate variables for async accumulation, then assign to draft at the end

## Correct Streaming Pattern

```typescript
// ✅ CORRECT - Trust backend accumulation
event.text = await backend.getNarration(narratePrompt(state, action), (token: string, count: number) => {
  onToken(token, count);        // Handle progress updates
  updateState();               // Update state during streaming
});
// event.text now contains complete response from backend
```

## Anti-Patterns to Avoid

```typescript
// ❌ WRONG - Double accumulation
let streamingText = "";
event.text = await backend.getNarration(prompt, (token: string, count: number) => {
  streamingText += token;      // Manual accumulation
  event.text = streamingText;  // Draft mutation in callback
  onToken(token, count);
  updateState();
});
event.text = streamingText;    // Overwriting backend result
```

## State Update During Streaming

- Use `updateState()` to trigger UI updates during streaming
- The `updateState()` function is throttled to 200ms intervals
- This provides real-time progress feedback without overwhelming the UI

## Backend Implementation

The backend handles streaming in [lib/backend.ts](mdc:lib/backend.ts):
- `getResponse()` accumulates all tokens in a `response` variable
- Calls the `onToken` callback for each token received
- Returns the complete accumulated response
- This is the single source of truth for complete text

## Fixed Issues

This pattern fixes the streaming text loss bug that existed in upstream:
- Upstream had `event.text += token` in callbacks (Immer violation)
- Our fix trusts backend accumulation and only handles progress updates
- Follows Immer best practices for draft state management